{"version":3,"file":"static/js/544.5329345f.chunk.js","mappings":"qPA4GA,UApGa,WACX,OAA4BA,EAAAA,EAAAA,UAASC,EAAAA,GAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BH,EAAAA,EAAAA,UAAS,CACnC,CACEI,GAAI,EACJC,YAAa,KACbC,MAAO,GACPC,eAAgB,GAChBC,aAAc,GACdC,aAAc,EACdC,WAAY,KARhB,eAAOC,EAAP,KAAeC,EAAf,KAWA,GAA0BZ,EAAAA,EAAAA,UAAS,GAAnC,eAAOa,EAAP,KAAcC,EAAd,KACA,GAA0Bd,EAAAA,EAAAA,UAAS,MAAnC,eAAOe,EAAP,KAAcC,EAAd,KACA,GAA8BhB,EAAAA,EAAAA,WAAS,GAAvC,eAAOiB,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,8EACE,KACEC,EAAAA,EAAAA,IAAY,GAAGC,MAAK,SAAAC,GAClBV,EAAUU,EAAKC,QAChB,IACDpB,EAAUF,EAAAA,GAAAA,SAIX,CAHC,MAAOc,GACPC,EAASD,GACTZ,EAAUF,EAAAA,GAAAA,SACX,CATH,2CAHc,wBACdE,EAAUF,EAAAA,GAAAA,SACVuB,aAAaC,QAAQ,YAAa,GAFpB,mCAcdC,EACD,GAAE,KAEHP,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEgCC,EAAAA,EAAAA,IAAYP,GAAOQ,MAAK,SAAAM,GAAC,OAAIA,EAAEJ,OAAN,IAFzD,OAEUK,EAFV,OAGIhB,GAAU,SAAAiB,GAAC,wBAAQA,IAAR,OAAcD,GAAd,IAHf,gDAKIZ,EAAS,EAAD,IALZ,0DADc,uBAAC,WAAD,wBASdU,EACD,GAAE,CAACb,IAiBJ,OAVwB,IAAlBF,EAAOmB,SACTV,EAAAA,EAAAA,IAAYP,GAAOQ,MAAK,SAAAC,GAClBX,EAAOmB,SAAWR,EAAKS,eACzBb,GAAW,EAEd,KAMH,gCACGhB,IAAWD,EAAAA,GAAAA,WACV,iCACE,eAAI+B,MAAO,CAAEC,SAAU,QAAvB,6BACA,SAAC,IAAD,CACEC,WAAYvB,EAAOmB,OACnBK,KAtBY,WACpBrB,GAAS,SAAAe,GAAC,OAAIA,EAAI,CAAR,GACX,EAqBSO,eAAgBC,KAAKC,MACnBC,OAAOf,aAAagB,QAAQ,cAE9BC,QAAQC,EAAAA,EAAAA,MACRzB,QAASA,EACT0B,QAAQ,eAAIX,MAAO,CAAEY,UAAW,UAAxB,wBACRC,YACE,cAAGb,MAAO,CAAEY,UAAW,UAAvB,UACE,0DAXN,UAeE,SAAC,IAAD,CAAWjC,OAAQA,EAAQmC,QAAS,kBAAMC,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,MAAhB,OAErCA,EAAAA,EAAAA,MAAc,MACb,UAAC,KAAD,CAAMF,QAAS,kBAAMG,EAAAA,EAAAA,KAAN,EAAf,iBACK,SAAC,MAAD,CAAWC,KAAM,WAK3BhD,IAAWD,EAAAA,GAAAA,WACV,+EAAuDc,EAAvD,OAEDb,IAAWD,EAAAA,GAAAA,UACV,qEAIP,C","sources":["pages/Home/Home.jsx"],"sourcesContent":["import { getTrending, STATUS } from 'serviceAPI/fetch';\nimport MovieList from 'components/MovieList/MovieList';\nimport { GoUp } from 'pages/Movies/Movies.styled';\nimport { HiArrowUp } from 'react-icons/hi';\nimport { useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { scrollPos, scrollTop, infiniteHeight, boxScroll } from 'utils/scroll';\n\nconst Home = () => {\n  const [status, setStatus] = useState(STATUS.idle);\n  const [movies, setMovies] = useState([\n    {\n      id: 0,\n      poster_path: null,\n      title: '',\n      original_title: '',\n      release_date: '',\n      vote_average: 0,\n      vote_count: 0,\n    },\n  ]);\n  const [pages, setPages] = useState(2);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n\n  useEffect(() => {\n    setStatus(STATUS.pending);\n    localStorage.setItem('scrollPos', 0);\n    async function fetchData() {\n      try {\n        getTrending(1).then(info => {\n          setMovies(info.results);\n        });\n        setStatus(STATUS.resolved);\n      } catch (error) {\n        setError(error);\n        setStatus(STATUS.rejected);\n      }\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const arrayOfMovies = await getTrending(pages).then(r => r.results);\n        setMovies(i => [...i, ...arrayOfMovies]);\n      } catch (error) {\n        setError(error);\n      }\n    }\n    fetchData();\n  }, [pages]);\n\n  const fetchMoreData = () => {\n    setPages(i => i + 1);\n  };\n\n  const reachTheEnd = () => {\n    if (movies.length !== 0) {\n      getTrending(pages).then(info => {\n        if (movies.length === info.total_results) {\n          setHasMore(false);\n        }\n      });\n    }\n  };\n  reachTheEnd();\n\n  return (\n    <>\n      {status === STATUS.resolved && (\n        <>\n          <h1 style={{ fontSize: '20px' }}>Trending today</h1>\n          <InfiniteScroll\n            dataLength={movies.length}\n            next={fetchMoreData}\n            initialScrollY={JSON.parse(\n              window.localStorage.getItem('scrollPos')\n            )}\n            height={infiniteHeight()}\n            hasMore={hasMore}\n            loader={<h4 style={{ textAlign: 'center' }}>Loading...</h4>}\n            endMessage={\n              <p style={{ textAlign: 'center' }}>\n                <b>Yay! You have seen it all ;D</b>\n              </p>\n            }\n          >\n            <MovieList movies={movies} onClick={() => scrollPos(boxScroll())} />\n          </InfiniteScroll>\n          {boxScroll() > 1000 && (\n            <GoUp onClick={() => scrollTop()}>\n              UP <HiArrowUp size={24} />\n            </GoUp>\n          )}\n        </>\n      )}\n      {status === STATUS.rejected && (\n        <h3>Something went wrong on API... The messege error `{error}`</h3>\n      )}\n      {status === STATUS.pending && (\n        <h3>Please wait, information is loading...</h3>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["useState","STATUS","status","setStatus","id","poster_path","title","original_title","release_date","vote_average","vote_count","movies","setMovies","pages","setPages","error","setError","hasMore","setHasMore","useEffect","getTrending","then","info","results","localStorage","setItem","fetchData","r","arrayOfMovies","i","length","total_results","style","fontSize","dataLength","next","initialScrollY","JSON","parse","window","getItem","height","infiniteHeight","loader","textAlign","endMessage","onClick","scrollPos","boxScroll","scrollTop","size"],"sourceRoot":""}